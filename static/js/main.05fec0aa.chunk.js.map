{"version":3,"sources":["islandConverter.js","App.js","index.js"],"names":["IslandConverter","_alphabet","_char2bin","char","indexOf","toString","slice","island2String","isle","maxRowLen","chars","concat","apply","map","row","length","join","match","binStr","bin","charAt","parseInt","string2island","str","rowLength","list","split","bin6","island","i","j","push","Layout","layout","sumTiles","tiles","reduce","a","b","p","c","className","name","cell","App","Layouts","PureComponent","ReactDOM","render","document","getElementById"],"mappings":"gNAAMA,E,kCAAAA,EACGC,UAAY,mEADfD,EAGGE,UAAY,SAACC,GAClB,OAAQ,SAJNH,EAIsBC,UAAUG,QAAQD,GAAME,SAAS,IAAIC,OAAO,IAJlEN,EAOGO,cAAgB,SAACC,GACtB,IAAIC,EAAY,EAQVC,EAPU,GAAGC,OAAOC,MAAM,GAAIJ,EAAKK,KAAI,SAAAC,GAI3C,OAHIA,EAAIC,OAASN,IACfA,EAAYK,EAAIC,QAEXD,EAAIE,KAAK,IAAIC,MAAM,WAAWJ,KAAI,SAAAK,GAAM,OAAKA,EAAS,UAAUZ,MAAM,EAAG,UAG5DO,KAAI,SAAAM,GACxB,OAjBAnB,EAiBYC,UAAUmB,OAAOC,SAASF,EAAK,OAG7C,OApBEnB,EAoBUC,UAAUmB,OAAOX,GAAaC,EAAMM,KAAK,KApBnDhB,EAuBGsB,cAAgB,SAACC,GAKtB,IAJA,IAAMC,EAxBJxB,EAwBqBC,UAAUG,QAAQmB,EAAIH,OAAO,IAC9CK,EAAOF,EAAIjB,MAAM,GAAGoB,MAAM,IAAIb,IAzBlCb,EAyB2CE,WAAWW,KAAI,SAAAc,GAAI,OAAIA,EAAKD,MAAM,OACzEE,EAAS,GAENC,EAAI,EAAGA,EAAIJ,EAAKV,OAAQc,IAAK,CAGpC,IAFA,IAAIf,EAAM,GACNgB,EAAID,EACDf,EAAIC,OAASS,IAElBV,EAAMA,EAAIH,OAAOc,EAAKK,KACdf,OAASS,IAEfV,EAAMA,EAAIR,MAAM,EAAGkB,GACfM,EAAID,GAENA,KAIJC,IAEFF,EAAOG,KAAKjB,GAEd,OAAOc,GAiBI5B,QC3DTgC,EAAS,SAACC,GAEd,IAAMC,EAAWD,EAAOE,MAAMC,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAE1B,OAAO2B,MAAIF,QAAO,SAACG,EAAEC,GAAH,OAASD,GAAS,IAAJC,EAAQ,EAAI,MAE7F,OAAQ,sBAAKC,UAAU,SAAf,UACN,6BAAKR,EAAOS,OACZ,sBAAKD,UAAU,MAAf,cAAuBP,EAAvB,aACA,8BAAMlC,EAAgBO,cAAc0B,EAAOE,SAC3C,qBAAKM,UAAU,eAAf,SACGR,EAAOE,MAAMtB,KAAI,SAAAC,GAAG,OAAI,qBAAK2B,UAAU,WAAf,SAA2B3B,EAAID,KAAI,SAAA8B,GAC1D,IAAIF,EAAY,OAMhB,OALW,IAAPE,EACFF,GAAa,UACG,IAAPE,IACTF,GAAa,eAER,qBAAKA,UAAWA,kBAmBhBG,E,uKAXX,OACE,gCACE,0DACA,qBAAKH,UAAU,UAAf,SACGI,EAAQhC,IAAImB,Y,GANLc,iBCvBlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.05fec0aa.chunk.js","sourcesContent":["class IslandConverter {\n  static _alphabet = 'abcdefghijklmnopqrstuvwxyz-_ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\n  static _char2bin = (char) => {\n    return ('000000' + this._alphabet.indexOf(char).toString(2)).slice(-6);\n  };\n\n  static island2String = (isle) => {\n    let maxRowLen = 0;\n    const binStrs = [].concat.apply([], isle.map(row => {\n      if (row.length > maxRowLen) {\n        maxRowLen = row.length;\n      }\n      return row.join('').match(/.{1,6}/g).map(binStr => (binStr + '000000').slice(0, 6));\n    }));\n  \n    const chars = binStrs.map(bin => {\n      return this._alphabet.charAt(parseInt(bin, 2));\n    });\n  \n    return this._alphabet.charAt(maxRowLen) + chars.join('');\n  }\n\n  static string2island = (str) => {\n    const rowLength = this._alphabet.indexOf(str.charAt(0));\n    const list = str.slice(1).split('').map(this._char2bin).map(bin6 => bin6.split(''));\n    const island = [];\n\n    for (let i = 0; i < list.length; i++) {\n      let row = [];\n      let j = i;\n      while (row.length < rowLength) {\n        // Add all the binary this letter encoded\n        row = row.concat(list[j]);\n        if (row.length > rowLength) {\n          // This is now too long; trim it down to length\n          row = row.slice(0, rowLength);\n          if (j > i) {\n            // and don't process this letter again\n            i++;\n          }\n        }\n        // Get ready to look ahead to the next letter\n        j++;\n      }\n      island.push(row);\n    }\n    return island;\n  }\n}\n\n/*\nconst island = [\n  [0,0,0,1,1,1,0,0,0],\n  [0,0,1,1,1,1,1,0,0],\n  [0,1,1,1,0,1,1,1,0],\n  [1,1,1,0,0,0,1,1,1],\n  [1,1,0,0,0,0,0,1,1]\n];\n\nconst str = IslandConverter.island2String(island);\nconsole.log(str, IslandConverter.string2island(str).map(row=>row.join()));\n*/\n\nexport default IslandConverter;","import React, { PureComponent } from 'react';\nimport './App.css';\nimport Layouts from './data/layouts.json';\nimport IslandConverter from './islandConverter';\n\nconst Layout = (layout) => {\n\n  const sumTiles = layout.tiles.reduce((a, b) => a.concat(b)).reduce((p,c) => p + (c===1 ? 1 : 0));\n\n  return (<div className='layout'>\n    <h3>{layout.name}</h3>\n    <div className='sum'>({sumTiles} tiles)</div>\n    <div>{IslandConverter.island2String(layout.tiles)}</div>\n    <div className='layout-tiles'>\n      {layout.tiles.map(row => <div className='tile-row'>{row.map(cell => {\n        let className = 'tile';\n        if (cell===1) {\n          className += ' filled';\n        } else if (cell===2) {\n          className += ' impassable';\n        }\n        return <div className={className} />\n      })}</div>)}\n    </div>\n  </div>);\n}\n\nclass App extends PureComponent {\n  render() {\n    return (\n      <div>\n        <h1>Forbidden Island Layouts</h1>\n        <div className='layouts'>\n          {Layouts.map(Layout)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}