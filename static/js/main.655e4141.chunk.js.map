{"version":3,"sources":["islandConverter.js","App.js","index.js"],"names":["IslandConverter","_alphabet","_char2bin","char","indexOf","toString","slice","island2String","isle","maxRowLen","chars","concat","apply","map","row","length","join","match","binStr","bin","charAt","parseInt","string2island","str","rowLength","list","split","bin6","island","i","j","push","b","Island","props","sumTiles","tiles","reduce","a","p","c","code","href","islandClassName","editable","className","name","y","cell","x","key","onClick","toggleTile","App","editIsland","state","getIslandName","setState","islands","Islands","forEach","editIslandString","URLSearchParams","window","location","search","get","Fragment","this","renderIslandEditor","Object","keys","islandKey","PureComponent","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.655e4141.chunk.js","sourcesContent":["class IslandConverter {\n  static _alphabet = 'abcdefghijklmnopqrstuvwxyz-_ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\n  static _char2bin = (char) => {\n    return ('000000' + this._alphabet.indexOf(char).toString(2)).slice(-6);\n  };\n\n  static island2String = (isle) => {\n    let maxRowLen = 0;\n    const binStrs = [].concat.apply([], isle.map(row => {\n      if (row.length > maxRowLen) {\n        maxRowLen = row.length;\n      }\n      return row.join('').match(/.{1,6}/g).map(binStr => (binStr + '000000').slice(0, 6));\n    }));\n  \n    const chars = binStrs.map(bin => {\n      return this._alphabet.charAt(parseInt(bin, 2));\n    });\n  \n    return this._alphabet.charAt(maxRowLen) + chars.join('');\n  }\n\n  static string2island = (str) => {\n    const rowLength = this._alphabet.indexOf(str.charAt(0));\n    const list = str.slice(1).split('').map(this._char2bin).map(bin6 => bin6.split(''));\n    const island = [];\n\n    for (let i = 0; i < list.length; i++) {\n      let row = [];\n      let j = i;\n      while (row.length < rowLength) {\n        // Add all the binary this letter encoded\n        row = row.concat(list[j]);\n        if (row.length > rowLength) {\n          // This is now too long; trim it down to length\n          row = row.slice(0, rowLength);\n          if (j > i) {\n            // and don't process this letter again\n            i++;\n          }\n        }\n        // Get ready to look ahead to the next letter\n        j++;\n      }\n      island.push(row.map(b => parseInt(b)));\n    }\n    return island;\n  }\n}\n\n/**\nconst island = [\n  [0,0,0,1,1,1,0,0,0],\n  [0,0,1,1,1,1,1,0,0],\n  [0,1,1,1,0,1,1,1,0],\n  [1,1,1,0,0,0,1,1,1],\n  [1,1,0,0,0,0,0,1,1]\n];\n\nconst str = IslandConverter.island2String(island);\nconsole.log(str, IslandConverter.string2island(str).map(row=>row.join()));\n**/\n\nexport default IslandConverter;","import React, { PureComponent } from 'react';\nimport './App.css';\nimport Islands from './data/islands.json';\nimport IslandConverter from './islandConverter';\n\nconst Island = (props) => {\n  const sumTiles = props.tiles.reduce((a, b) => a.concat(b)).reduce((p,c) => p + (c===1 ? 1 : 0));\n  const code = props.code || IslandConverter.island2String(props.tiles);\n  const href = `?i=${code}`;\n  const islandClassName = props.editable ? 'layout-tiles editable': 'layout-tiles';\n\n  return (<div className='layout' key={props.name}>\n    <h3><a href={href}>{props.name}</a></h3>\n    <div className='sum'>({sumTiles} tiles)</div>\n    <div className={islandClassName}>\n      {props.tiles.map((row, y) => <div className='tile-row' key={`tile-row-${y}`}>{row.map((cell,x) => {\n        let className = 'tile';\n        if (cell===1) {\n          className += ' filled';\n        } else if (cell===2) {\n          className += ' impassable';\n        }\n        const key = `tile-cell-${x},${y}`;\n        return <div onClick={() => props.editable ? props.toggleTile(x, y) : null} key={key} className={className} />\n      })}</div>)}\n    </div>\n  </div>);\n}\n\nclass App extends PureComponent {\n\n  constructor(props) {\n    super(props);\n\n    const islands = {};\n    Islands.forEach(island => {\n      islands[island.name] = island;\n    });\n    const urlParams = new URLSearchParams(window.location.search);\n    const editIslandString = urlParams.get('i');\n    let editIsland = false;\n    if (editIslandString) {\n      const name = this.getIslandName(editIslandString);\n      editIsland = {\n        name,\n        code: editIslandString,\n        editable: true,\n        tiles: IslandConverter.string2island(editIslandString)\n      };\n    }\n\n    this.state = { islands, editIsland };\n  }\n\n  getIslandName(code) {\n    return `Island ${code}`;\n  }\n\n  toggleTile = (x, y) => {\n    const editIsland = {...this.state.editIsland};\n    editIsland.tiles[y][x] = editIsland.tiles[y][x] ? 0 : 1;\n    editIsland.code = IslandConverter.island2String(editIsland.tiles);\n    editIsland.name = this.getIslandName(editIsland.code);\n    this.setState({ editIsland });\n  }\n\n  renderIslandEditor() {\n    return (\n      <React.Fragment>\n        <h1>Forbidden Island Map Editor</h1>\n        <div className='layouts'>\n          <Island\n          {...this.state.editIsland}\n          toggleTile={this.toggleTile}\n        />\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    return (\n      <div className='islands'>\n        {this.state.editIsland ? this.renderIslandEditor() : null}\n        <h1>Sample Islands</h1>\n        <div className='layouts'>\n          {Object.keys(this.state.islands).map(islandKey => <Island\n            tiles={this.state.islands[islandKey].tiles}\n            name={`'${this.state.islands[islandKey].name}'`}\n            />)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}